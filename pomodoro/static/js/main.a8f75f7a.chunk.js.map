{"version":3,"sources":["TimerDisplay.tsx","App.tsx","index.tsx"],"names":["TimerDisplay","props","digits","seconds","m","Math","floor","s","secondsToDigits","className","running","Digit","segments","digitTo7SegmentByte","highlight","Colon","on","colon","byte","bits","Array","from","map","_","i","onColor","offColor","viewBox","width","height","id","transform","style","fill","d","digit","cx","cy","r","App","useState","setSeconds","setColon","useEffect","intervalId","setInterval","max","clearInterval","document","body","classList","add","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8f75f7a.chunk.js","sourcesContent":["import React from 'react'\nimport './TimerDisplay.css'\n\nexport default function TimerDisplay(props: { colon: boolean; seconds: number; running: boolean }): JSX.Element {\n  const digits = secondsToDigits(props.seconds)\n  return (\n    <div className={'Timer' + (props.running ? '' : ' zero')}>\n      <Digit segments={digitTo7SegmentByte(digits[3])} highlight={!props.running} />\n      <Digit segments={digitTo7SegmentByte(digits[2])} highlight={!props.running} />\n      <Colon on={props.colon || !props.running} highlight={!props.running} />\n      <Digit segments={digitTo7SegmentByte(digits[1])} highlight={!props.running} />\n      <Digit segments={digitTo7SegmentByte(digits[0])} highlight={!props.running} />\n    </div>\n  )\n}\n\nfunction secondsToDigits(seconds: number): number[] {\n  const m = Math.floor(seconds / 60)\n  const s = seconds % 60\n  return [s % 10, Math.floor(s / 10), m % 10, Math.floor(m / 10)]\n}\n\nfunction Digit(props: { segments: number; highlight: boolean }): JSX.Element {\n  const bits = byteToBits(props.segments)\n  const onColor = props.highlight ? '#ffffff' : '#333333'\n  const offColor = '#090909'\n  return (\n    <div className=\"Digit\">\n      <svg viewBox=\"0 0 68 90\" width=\"100%\" height=\"100%\">\n        <g id=\"digit\" transform=\"translate(-32.112548,-36.909167)\">\n          <path\n            id=\"a\"\n            style={{ fill: bits[0] ? onColor : offColor }}\n            d=\"m 42.740542,45.193624 15.945797,7.723042 h 22.567614 l 15.085902,-13.73973 c -1.723896,-1.343925 -3.95192,-2.13527 -6.485909,-2.13527 H 55.080357 c -5.276503,0 -10.197512,3.419679 -12.339815,8.151958 z\"\n          />\n          <path\n            id=\"b\"\n            style={{ fill: bits[1] ? onColor : offColor }}\n            d=\"m 98.09427,40.961841 -14.849224,13.522688 -2.505789,17.829918 6.395474,7.766968 9.675378,-9.159647 3.130561,-22.276676 c 0.41497,-2.952715 -0.312182,-5.639397 -1.8464,-7.683251 z\"\n          />\n          <path\n            id=\"c\"\n            style={{ fill: bits[2] ? onColor : offColor }}\n            d=\"m 93.827863,92.142179 -6.920507,-8.40414 -8.966896,8.488373 -2.447396,17.414958 11.48819,13.00541 c 1.880095,-1.98383 3.191785,-4.50161 3.578074,-7.25021 z\"\n          />\n          <path\n            id=\"d\"\n            style={{ fill: bits[3] ? onColor : offColor }}\n            d=\"M 85.110565,124.30611 73.467351,111.125 H 49.128267 l -16.69614,7.93905 C 33.326686,123.68337 37.242308,127 42.437719,127 h 34.773589 c 2.868165,0 5.630378,-1.01155 7.899257,-2.69389 z\"\n          />\n          <path\n            id=\"e\"\n            style={{ fill: bits[4] ? onColor : offColor }}\n            d=\"m 32.257462,116.37842 16.96434,-8.06617 2.411222,-17.159676 -6.50658,-7.551994 -9.505363,8.526613 -3.270086,23.269377 c -0.04653,0.33111 -0.0752,0.65793 -0.09353,0.98185 z\"\n          />\n          <path\n            id=\"f\"\n            style={{ fill: bits[5] ? onColor : offColor }}\n            d=\"m 38.447265,72.01886 6.907588,8.018113 8.972063,-8.048088 2.421557,-17.233055 -14.815632,-7.175789 c -0.0813,0.350896 -0.149992,0.705634 -0.200504,1.065051 z\"\n          />\n          <path\n            id=\"g\"\n            style={{ fill: bits[6] ? onColor : offColor }}\n            d=\"m 55.736648,74.083332 -8.749337,7.8481 6.915341,8.0269 H 76.70126 l 8.613428,-8.154024 -6.357752,-7.720976 z\"\n          />\n        </g>\n      </svg>\n    </div>\n  )\n}\n\nfunction byteToBits(byte: number): boolean[] {\n  return Array.from(Array(8)).map((_, i) => !!((byte >> i) % 2))\n}\n\nfunction digitTo7SegmentByte(digit: number) {\n  switch (digit) {\n    case 0:\n      return 63\n    case 1:\n      return 6\n    case 2:\n      return 91\n    case 3:\n      return 79\n    case 4:\n      return 102\n    case 5:\n      return 109\n    case 6:\n      return 125\n    case 7:\n      return 7\n    case 8:\n      return 127\n    case 9:\n      return 111\n    default:\n      return 0\n  }\n}\n\nfunction Colon(props: { on: boolean; highlight: boolean }): JSX.Element {\n  const onColor = props.highlight ? '#ffffff' : '#333333'\n  const offColor = '#090909'\n  return (\n    <div className=\"Colon\">\n      <svg viewBox=\"0 0 20 90\" width=\"100%\" height=\"100%\">\n        <circle style={{ fill: props.on ? onColor : offColor }} id=\"circle\" cx=\"12\" cy=\"28\" r=\"8\" />\n        <circle style={{ fill: props.on ? onColor : offColor }} id=\"circle\" cx=\"8\" cy=\"64\" r=\"8\" />\n      </svg>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport TimerDisplay from './TimerDisplay'\n\nfunction App(): JSX.Element {\n  const [seconds, setSeconds] = useState(25 * 60)\n  const [colon, setColon] = useState(true)\n  const running = seconds > 0\n  useEffect(counterTimer, [])\n  useEffect(colonTimer, [])\n  useEffect(runningEffect, [running])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TimerDisplay colon={colon} running={running} seconds={seconds} />\n      </header>\n    </div>\n  )\n\n  function counterTimer() {\n    const intervalId = setInterval(() => {\n      setSeconds((seconds) => Math.max(seconds - 1, 0))\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }\n\n  function colonTimer() {\n    const intervalId = setInterval(() => {\n      setColon((colon) => !colon)\n    }, 700)\n\n    return () => clearInterval(intervalId)\n  }\n\n  function runningEffect() {\n    if (running) {\n      document.body.classList.add('running')\n    } else {\n      document.body.classList.remove('running')\n    }\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}