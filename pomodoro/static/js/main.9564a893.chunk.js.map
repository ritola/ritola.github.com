{"version":3,"sources":["Timer.tsx","App.tsx","index.tsx"],"names":["Timer","props","className","running","secondsToString","seconds","colon","pad2","Math","floor","n","padStart","App","useState","setSeconds","setColon","useEffect","intervalId","setInterval","max","clearInterval","document","body","classList","add","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OAGe,SAASA,EAAMC,GAC5B,OACE,qBAAKC,UAAW,SAAWD,EAAME,QAAU,GAAK,SAAhD,SACGC,EAAgBH,EAAMI,QAASJ,EAAMK,OAASL,EAAME,WAK3D,SAASC,EAAgBC,EAAiBC,GAGxC,OAFWC,EAAKC,KAAKC,MAAMJ,EAAU,MAExBC,GAAqB,IAAZD,EAAgB,IAAM,KADjCE,EAAKF,EAAU,IAI5B,SAASE,EAAKG,GACZ,MAAO,UAAGA,GAAIC,SAAS,EAAG,KC2BbC,MAzCf,WAA6B,IAAD,EACIC,mBAAS,MADb,mBACnBR,EADmB,KACVS,EADU,OAEAD,oBAAS,GAFT,mBAEnBP,EAFmB,KAEZS,EAFY,KAGpBZ,EAAUE,EAAU,EAK1B,OAJAW,qBAYA,WACE,IAAMC,EAAaC,aAAY,WAC7BJ,GAAW,SAACT,GAAD,OAAaG,KAAKW,IAAId,EAAU,EAAG,QAC7C,KAEH,OAAO,kBAAMe,cAAcH,MAjBL,IACxBD,qBAmBA,WACE,IAAMC,EAAaC,aAAY,WAC7BH,GAAS,SAACT,GAAD,OAAYA,OACpB,KAEH,OAAO,kBAAMc,cAAcH,MAxBP,IACtBD,qBA0BA,WACMb,EACFkB,SAASC,KAAKC,UAAUC,IAAI,WAE5BH,SAASC,KAAKC,UAAUE,OAAO,aA9BV,CAACtB,IAGxB,qBAAKD,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,CAAOI,MAAOA,EAAOH,QAASA,EAASE,QAASA,SCTxDqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFP,SAASQ,eAAe,W","file":"static/js/main.9564a893.chunk.js","sourcesContent":["import React from 'react'\nimport './Timer.css'\n\nexport default function Timer(props: { colon: boolean; seconds: number; running: boolean }): JSX.Element {\n  return (\n    <div className={'Timer' + (props.running ? '' : ' zero')}>\n      {secondsToString(props.seconds, props.colon && props.running)}\n    </div>\n  )\n}\n\nfunction secondsToString(seconds: number, colon: boolean): string {\n  const mm = pad2(Math.floor(seconds / 60))\n  const ss = pad2(seconds % 60)\n  return mm + (colon || seconds === 0 ? ':' : ' ') + ss\n}\n\nfunction pad2(n: number): string {\n  return `${n}`.padStart(2, '0')\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport Timer from './Timer'\n\nfunction App(): JSX.Element {\n  const [seconds, setSeconds] = useState(25 * 60)\n  const [colon, setColon] = useState(true)\n  const running = seconds > 0\n  useEffect(counterTimer, [])\n  useEffect(colonTimer, [])\n  useEffect(runningEffect, [running])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Timer colon={colon} running={running} seconds={seconds} />\n      </header>\n    </div>\n  )\n\n  function counterTimer() {\n    const intervalId = setInterval(() => {\n      setSeconds((seconds) => Math.max(seconds - 1, 0))\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }\n\n  function colonTimer() {\n    const intervalId = setInterval(() => {\n      setColon((colon) => !colon)\n    }, 700)\n\n    return () => clearInterval(intervalId)\n  }\n\n  function runningEffect() {\n    if (running) {\n      document.body.classList.add('running')\n    } else {\n      document.body.classList.remove('running')\n    }\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}